package com.example.administrator.jiayan_project.db.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADDRESS_BEAN".
*/
public class AddressBeanDao extends AbstractDao<AddressBean, Long> {

    public static final String TABLENAME = "ADDRESS_BEAN";

    /**
     * Properties of entity AddressBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Realname = new Property(2, String.class, "realname", false, "REALNAME");
        public final static Property Phone = new Property(3, String.class, "phone", false, "PHONE");
        public final static Property Area = new Property(4, String.class, "area", false, "AREA");
        public final static Property Street = new Property(5, String.class, "street", false, "STREET");
        public final static Property Address = new Property(6, String.class, "address", false, "ADDRESS");
        public final static Property Isdefault = new Property(7, boolean.class, "isdefault", false, "ISDEFAULT");
    }


    public AddressBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AddressBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADDRESS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USERNAME\" TEXT," + // 1: username
                "\"REALNAME\" TEXT," + // 2: realname
                "\"PHONE\" TEXT," + // 3: phone
                "\"AREA\" TEXT," + // 4: area
                "\"STREET\" TEXT," + // 5: street
                "\"ADDRESS\" TEXT," + // 6: address
                "\"ISDEFAULT\" INTEGER NOT NULL );"); // 7: isdefault
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADDRESS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AddressBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(3, realname);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(5, area);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(6, street);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
        stmt.bindLong(8, entity.getIsdefault() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AddressBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(3, realname);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(5, area);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(6, street);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
        stmt.bindLong(8, entity.getIsdefault() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AddressBean readEntity(Cursor cursor, int offset) {
        AddressBean entity = new AddressBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // realname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // area
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // street
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // address
            cursor.getShort(offset + 7) != 0 // isdefault
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AddressBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRealname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setArea(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStreet(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsdefault(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AddressBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AddressBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AddressBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
