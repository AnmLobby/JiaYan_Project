package com.example.administrator.jiayan_project.db.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KEEP_USER_BEAN".
*/
public class KeepUserBeanDao extends AbstractDao<KeepUserBean, Long> {

    public static final String TABLENAME = "KEEP_USER_BEAN";

    /**
     * Properties of entity KeepUserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Group_id = new Property(1, int.class, "group_id", false, "GROUP_ID");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME");
        public final static Property Realname = new Property(4, String.class, "realname", false, "REALNAME");
        public final static Property Age = new Property(5, int.class, "age", false, "AGE");
        public final static Property Mobile = new Property(6, String.class, "mobile", false, "MOBILE");
        public final static Property Avatar = new Property(7, String.class, "avatar", false, "AVATAR");
        public final static Property Level = new Property(8, int.class, "level", false, "LEVEL");
        public final static Property Gender = new Property(9, int.class, "gender", false, "GENDER");
        public final static Property UserId = new Property(10, int.class, "userId", false, "USER_ID");
    }


    public KeepUserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public KeepUserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KEEP_USER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GROUP_ID\" INTEGER NOT NULL ," + // 1: group_id
                "\"USERNAME\" TEXT," + // 2: username
                "\"NICKNAME\" TEXT," + // 3: nickname
                "\"REALNAME\" TEXT," + // 4: realname
                "\"AGE\" INTEGER NOT NULL ," + // 5: age
                "\"MOBILE\" TEXT," + // 6: mobile
                "\"AVATAR\" TEXT," + // 7: avatar
                "\"LEVEL\" INTEGER NOT NULL ," + // 8: level
                "\"GENDER\" INTEGER NOT NULL ," + // 9: gender
                "\"USER_ID\" INTEGER NOT NULL );"); // 10: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KEEP_USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, KeepUserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGroup_id());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(5, realname);
        }
        stmt.bindLong(6, entity.getAge());
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(7, mobile);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(8, avatar);
        }
        stmt.bindLong(9, entity.getLevel());
        stmt.bindLong(10, entity.getGender());
        stmt.bindLong(11, entity.getUserId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, KeepUserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGroup_id());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(5, realname);
        }
        stmt.bindLong(6, entity.getAge());
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(7, mobile);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(8, avatar);
        }
        stmt.bindLong(9, entity.getLevel());
        stmt.bindLong(10, entity.getGender());
        stmt.bindLong(11, entity.getUserId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public KeepUserBean readEntity(Cursor cursor, int offset) {
        KeepUserBean entity = new KeepUserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // group_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // realname
            cursor.getInt(offset + 5), // age
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mobile
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // avatar
            cursor.getInt(offset + 8), // level
            cursor.getInt(offset + 9), // gender
            cursor.getInt(offset + 10) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, KeepUserBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroup_id(cursor.getInt(offset + 1));
        entity.setUsername(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRealname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAge(cursor.getInt(offset + 5));
        entity.setMobile(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAvatar(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLevel(cursor.getInt(offset + 8));
        entity.setGender(cursor.getInt(offset + 9));
        entity.setUserId(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(KeepUserBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(KeepUserBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(KeepUserBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
